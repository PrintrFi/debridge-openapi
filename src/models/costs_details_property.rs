/*
 * deBridge Liquidity Network (DLN) API
 *
 * A turnkey solution for a high-performance cross-chain trading<br><br><a href=\"https://docs.debridge.finance/dln-the-debridge-liquidity-network-protocol/interacting-with-the-api/quick-start-guide\">Quick Start Guide</a>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CostsDetailsProperty {
    #[serde(rename = "chain")]
    pub chain: String,
    #[serde(rename = "tokenIn")]
    pub token_in: String,
    #[serde(rename = "tokenOut")]
    pub token_out: String,
    #[serde(rename = "amountIn")]
    pub amount_in: String,
    #[serde(rename = "amountOut")]
    pub amount_out: String,
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(rename = "payload", skip_serializing_if = "Option::is_none")]
    pub payload: Option<Box<models::Payload>>,
}

impl CostsDetailsProperty {
    pub fn new(
        chain: String,
        token_in: String,
        token_out: String,
        amount_in: String,
        amount_out: String,
        r#type: String,
    ) -> CostsDetailsProperty {
        CostsDetailsProperty {
            chain,
            token_in,
            token_out,
            amount_in,
            amount_out,
            r#type,
            payload: None,
        }
    }
}
