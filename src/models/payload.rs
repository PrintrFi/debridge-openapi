/*
 * deBridge Liquidity Network (DLN) API
 *
 * A turnkey solution for a high-performance cross-chain trading<br><br><a href=\"https://docs.debridge.finance/dln-the-debridge-liquidity-network-protocol/interacting-with-the-api/quick-start-guide\">Quick Start Guide</a>
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Payload {
    #[serde(rename = "feeAmount", skip_serializing_if = "Option::is_none")]
    pub fee_amount: Option<String>,
    #[serde(rename = "feeBps", skip_serializing_if = "Option::is_none")]
    pub fee_bps: Option<String>,
    #[serde(rename = "amountOutBeforeCorrection", skip_serializing_if = "Option::is_none")]
    pub amount_out_before_correction: Option<String>,
    #[serde(rename = "estimatedVolatilityBps", skip_serializing_if = "Option::is_none")]
    pub estimated_volatility_bps: Option<String>,
    #[serde(rename = "actualFeeAmount", skip_serializing_if = "Option::is_none")]
    pub actual_fee_amount: Option<String>,
    #[serde(rename = "actualFeeBps", skip_serializing_if = "Option::is_none")]
    pub actual_fee_bps: Option<String>,
    #[serde(rename = "subsidyAmount", skip_serializing_if = "Option::is_none")]
    pub subsidy_amount: Option<String>,
    #[serde(rename = "feeApproximateUsdValue", skip_serializing_if = "Option::is_none")]
    pub fee_approximate_usd_value: Option<String>,
}

impl Payload {
    pub fn new() -> Payload {
        Payload {
            fee_amount: None,
            fee_bps: None,
            amount_out_before_correction: None,
            estimated_volatility_bps: None,
            actual_fee_amount: None,
            actual_fee_bps: None,
            subsidy_amount: None,
            fee_approximate_usd_value: None,
        }
    }
}

