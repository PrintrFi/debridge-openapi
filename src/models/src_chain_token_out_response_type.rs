/*
 * deBridge Liquidity Network (DLN) API
 *
 * A turnkey solution for a high-performance cross-chain trading<br><br><a href=\"https://docs.debridge.finance/dln-the-debridge-liquidity-network-protocol/interacting-with-the-api/quick-start-guide\">Quick Start Guide</a>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SrcChainTokenOutResponseType {
    #[serde(rename = "address")]
    pub address: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "symbol")]
    pub symbol: String,
    #[serde(rename = "decimals")]
    pub decimals: i32,
    #[serde(rename = "amount")]
    pub amount: String,
    #[serde(rename = "chainId")]
    pub chain_id: f64,
    #[serde(rename = "maxRefundAmount")]
    pub max_refund_amount: String,
    #[serde(rename = "approximateUsdValue")]
    pub approximate_usd_value: f64,
}

impl SrcChainTokenOutResponseType {
    pub fn new(
        address: String,
        name: String,
        symbol: String,
        decimals: i32,
        amount: String,
        chain_id: f64,
        max_refund_amount: String,
        approximate_usd_value: f64,
    ) -> SrcChainTokenOutResponseType {
        SrcChainTokenOutResponseType {
            address,
            name,
            symbol,
            decimals,
            amount,
            chain_id,
            max_refund_amount,
            approximate_usd_value,
        }
    }
}
