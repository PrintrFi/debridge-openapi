/*
 * deBridge Liquidity Network (DLN) API
 *
 * A turnkey solution for a high-performance cross-chain trading<br><br><a href=\"https://docs.debridge.finance/dln-the-debridge-liquidity-network-protocol/interacting-with-the-api/quick-start-guide\">Quick Start Guide</a>
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderStruct {
    #[serde(rename = "makerOrderNonce")]
    pub maker_order_nonce: i32,
    #[serde(rename = "makerSrc")]
    pub maker_src: String,
    #[serde(rename = "giveOffer")]
    pub give_offer: Box<models::Offer>,
    #[serde(rename = "receiverDst")]
    pub receiver_dst: String,
    #[serde(rename = "takeOffer")]
    pub take_offer: Box<models::Offer>,
    #[serde(rename = "givePatchAuthoritySrc")]
    pub give_patch_authority_src: String,
    #[serde(rename = "orderAuthorityAddressDst")]
    pub order_authority_address_dst: String,
    #[serde(rename = "allowedTakerDst")]
    pub allowed_taker_dst: String,
    #[serde(rename = "allowedCancelBeneficiarySrc")]
    pub allowed_cancel_beneficiary_src: String,
    #[serde(rename = "externalCall")]
    pub external_call: String,
}

impl OrderStruct {
    pub fn new(maker_order_nonce: i32, maker_src: String, give_offer: models::Offer, receiver_dst: String, take_offer: models::Offer, give_patch_authority_src: String, order_authority_address_dst: String, allowed_taker_dst: String, allowed_cancel_beneficiary_src: String, external_call: String) -> OrderStruct {
        OrderStruct {
            maker_order_nonce,
            maker_src,
            give_offer: Box::new(give_offer),
            receiver_dst,
            take_offer: Box::new(take_offer),
            give_patch_authority_src,
            order_authority_address_dst,
            allowed_taker_dst,
            allowed_cancel_beneficiary_src,
            external_call,
        }
    }
}

