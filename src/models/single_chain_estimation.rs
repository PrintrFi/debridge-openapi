/*
 * deBridge Liquidity Network (DLN) API
 *
 * A turnkey solution for a high-performance cross-chain trading<br><br><a href=\"https://docs.debridge.finance/dln-the-debridge-liquidity-network-protocol/interacting-with-the-api/quick-start-guide\">Quick Start Guide</a>
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SingleChainEstimation {
    #[serde(rename = "tokenIn")]
    pub token_in: Box<models::TokenWithAmount>,
    #[serde(rename = "tokenOut")]
    pub token_out: Box<models::TokenWithMinAmount>,
    #[serde(rename = "slippage")]
    pub slippage: f64,
    #[serde(rename = "recommendedSlippage")]
    pub recommended_slippage: f64,
}

impl SingleChainEstimation {
    pub fn new(token_in: models::TokenWithAmount, token_out: models::TokenWithMinAmount, slippage: f64, recommended_slippage: f64) -> SingleChainEstimation {
        SingleChainEstimation {
            token_in: Box::new(token_in),
            token_out: Box::new(token_out),
            slippage,
            recommended_slippage,
        }
    }
}

