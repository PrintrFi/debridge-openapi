/*
 * deBridge Liquidity Network (DLN) API
 *
 * A turnkey solution for a high-performance cross-chain trading<br><br><a href=\"https://docs.debridge.finance/dln-the-debridge-liquidity-network-protocol/interacting-with-the-api/quick-start-guide\">Quick Start Guide</a>
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DlnOrderCreateTxResponse {
    #[serde(rename = "estimation")]
    pub estimation: Box<models::DlnOrderEstimation>,
    #[serde(rename = "tx")]
    pub tx: Box<models::DlnTx>,
    #[serde(rename = "orderId")]
    pub order_id: String,
    #[serde(rename = "prependedOperatingExpenseCost", skip_serializing_if = "Option::is_none")]
    pub prepended_operating_expense_cost: Option<String>,
    #[serde(rename = "order")]
    pub order: Box<models::Order>,
    #[serde(rename = "fixFee")]
    pub fix_fee: String,
    #[serde(rename = "userPoints")]
    pub user_points: f64,
    #[serde(rename = "integratorPoints")]
    pub integrator_points: f64,
    #[serde(rename = "actualUserPoints", skip_serializing_if = "Option::is_none")]
    pub actual_user_points: Option<f64>,
    #[serde(rename = "actualIntegratorPoints", skip_serializing_if = "Option::is_none")]
    pub actual_integrator_points: Option<f64>,
    #[serde(rename = "estimatedTransactionFee", skip_serializing_if = "Option::is_none")]
    pub estimated_transaction_fee: Option<Box<models::FeeInfo>>,
    #[serde(rename = "usdPriceImpact", skip_serializing_if = "Option::is_none")]
    pub usd_price_impact: Option<serde_json::Value>,
}

impl DlnOrderCreateTxResponse {
    pub fn new(estimation: models::DlnOrderEstimation, tx: models::DlnTx, order_id: String, order: models::Order, fix_fee: String, user_points: f64, integrator_points: f64) -> DlnOrderCreateTxResponse {
        DlnOrderCreateTxResponse {
            estimation: Box::new(estimation),
            tx: Box::new(tx),
            order_id,
            prepended_operating_expense_cost: None,
            order: Box::new(order),
            fix_fee,
            user_points,
            integrator_points,
            actual_user_points: None,
            actual_integrator_points: None,
            estimated_transaction_fee: None,
            usd_price_impact: None,
        }
    }
}

