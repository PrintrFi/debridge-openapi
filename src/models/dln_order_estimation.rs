/*
 * deBridge Liquidity Network (DLN) API
 *
 * A turnkey solution for a high-performance cross-chain trading<br><br><a href=\"https://docs.debridge.finance/dln-the-debridge-liquidity-network-protocol/interacting-with-the-api/quick-start-guide\">Quick Start Guide</a>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DlnOrderEstimation {
    #[serde(rename = "srcChainTokenIn")]
    pub src_chain_token_in: Box<models::SrcChainTokenInResponseType>,
    #[serde(rename = "srcChainTokenOut", skip_serializing_if = "Option::is_none")]
    pub src_chain_token_out: Option<Box<models::SrcChainTokenOutResponseType>>,
    #[serde(rename = "dstChainTokenOut")]
    pub dst_chain_token_out: Box<models::DstChainTokenOutResponseType>,
    #[serde(
        rename = "recommendedSlippage",
        skip_serializing_if = "Option::is_none"
    )]
    pub recommended_slippage: Option<f64>,
    #[serde(rename = "costsDetails")]
    pub costs_details: Vec<models::CostsDetailsProperty>,
}

impl DlnOrderEstimation {
    pub fn new(
        src_chain_token_in: models::SrcChainTokenInResponseType,
        dst_chain_token_out: models::DstChainTokenOutResponseType,
        costs_details: Vec<models::CostsDetailsProperty>,
    ) -> DlnOrderEstimation {
        DlnOrderEstimation {
            src_chain_token_in: Box::new(src_chain_token_in),
            src_chain_token_out: None,
            dst_chain_token_out: Box::new(dst_chain_token_out),
            recommended_slippage: None,
            costs_details,
        }
    }
}
