/*
 * deBridge Liquidity Network (DLN) API
 *
 * A turnkey solution for a high-performance cross-chain trading<br><br><a href=\"https://docs.debridge.finance/dln-the-debridge-liquidity-network-protocol/interacting-with-the-api/quick-start-guide\">Quick Start Guide</a>
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`single_swap_controller_v10_get_chain_estimation`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SingleSwapControllerV10GetChainEstimationError {
    Status400(models::BadRequestResponse),
    Status500(models::InternalServerErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`single_swap_controller_v10_get_chain_transaction`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SingleSwapControllerV10GetChainTransactionError {
    Status400(models::BadRequestResponse),
    Status500(models::InternalServerErrorResponse),
    UnknownValue(serde_json::Value),
}


pub async fn single_swap_controller_v10_get_chain_estimation(configuration: &configuration::Configuration, chain_id: &str, token_in: &str, token_in_amount: &str, token_out: &str, slippage: Option<&str>, affiliate_fee_percent: Option<f64>, affiliate_fee_recipient: Option<&str>) -> Result<models::ChainEstimationResponseV10, Error<SingleSwapControllerV10GetChainEstimationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_chain_id = chain_id;
    let p_token_in = token_in;
    let p_token_in_amount = token_in_amount;
    let p_token_out = token_out;
    let p_slippage = slippage;
    let p_affiliate_fee_percent = affiliate_fee_percent;
    let p_affiliate_fee_recipient = affiliate_fee_recipient;

    let uri_str = format!("{}/v1.0/chain/estimation", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("chainId", &p_chain_id.to_string())]);
    req_builder = req_builder.query(&[("tokenIn", &p_token_in.to_string())]);
    req_builder = req_builder.query(&[("tokenInAmount", &p_token_in_amount.to_string())]);
    if let Some(ref param_value) = p_slippage {
        req_builder = req_builder.query(&[("slippage", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("tokenOut", &p_token_out.to_string())]);
    if let Some(ref param_value) = p_affiliate_fee_percent {
        req_builder = req_builder.query(&[("affiliateFeePercent", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_affiliate_fee_recipient {
        req_builder = req_builder.query(&[("affiliateFeeRecipient", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ChainEstimationResponseV10`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ChainEstimationResponseV10`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SingleSwapControllerV10GetChainEstimationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn single_swap_controller_v10_get_chain_transaction(configuration: &configuration::Configuration, chain_id: &str, token_in: &str, token_in_amount: &str, token_out: &str, token_out_recipient: &str, slippage: Option<&str>, affiliate_fee_percent: Option<f64>, affiliate_fee_recipient: Option<&str>, sender_address: Option<&str>) -> Result<models::ChainTransactionResponseV10, Error<SingleSwapControllerV10GetChainTransactionError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_chain_id = chain_id;
    let p_token_in = token_in;
    let p_token_in_amount = token_in_amount;
    let p_token_out = token_out;
    let p_token_out_recipient = token_out_recipient;
    let p_slippage = slippage;
    let p_affiliate_fee_percent = affiliate_fee_percent;
    let p_affiliate_fee_recipient = affiliate_fee_recipient;
    let p_sender_address = sender_address;

    let uri_str = format!("{}/v1.0/chain/transaction", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("chainId", &p_chain_id.to_string())]);
    req_builder = req_builder.query(&[("tokenIn", &p_token_in.to_string())]);
    req_builder = req_builder.query(&[("tokenInAmount", &p_token_in_amount.to_string())]);
    if let Some(ref param_value) = p_slippage {
        req_builder = req_builder.query(&[("slippage", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("tokenOut", &p_token_out.to_string())]);
    req_builder = req_builder.query(&[("tokenOutRecipient", &p_token_out_recipient.to_string())]);
    if let Some(ref param_value) = p_affiliate_fee_percent {
        req_builder = req_builder.query(&[("affiliateFeePercent", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_affiliate_fee_recipient {
        req_builder = req_builder.query(&[("affiliateFeeRecipient", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sender_address {
        req_builder = req_builder.query(&[("senderAddress", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ChainTransactionResponseV10`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ChainTransactionResponseV10`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SingleSwapControllerV10GetChainTransactionError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

